{
  "status": "success",
  "mode": "dynamic_only",
  "timestamp": "2025-08-09T19:10:14.226435",
  "extraction_results": "{\n  \"document_metadata\": {\n    \"title\": \"Security Assessment Report - Acme Web Application\",\n    \"total_vulnerabilities\": 5,\n    \"extraction_date\": \"2025-08-09\",\n    \"source_file\": \"report.pdf\"\n  },\n  \"vulnerabilities\": [\n    {\n      \"id\": \"VULN-001\",\n      \"title\": \"SQL Injection in product search\",\n      \"description\": \"The category_id parameter in POST /products is concatenated directly into an SQL query. Submitting crafted input (e.g., a single quote and Boolean expression) triggers a database error and permits SQL manipulation and data extraction.\",\n      \"severity\": \"High\",\n      \"cwe_id\": \"CWE-89\",\n      \"owasp_category\": \"A03:2021 - Injection\",\n      \"affected_url\": \"https://app.acme.example/products\",\n      \"affected_parameter\": \"category_id\",\n      \"http_method\": \"POST\",\n      \"evidence\": \"Response: 500 Internal Server Error; SQL Error: You have an error in your SQL syntax near \\\"' OR '1'='1\\\" at line 1\",\n      \"payload\": \"category_id=1' OR '1'='1\",\n      \"impact\": \"An attacker can bypass filters, extract sensitive data from the database, or modify database contents leading to data disclosure, corruption or elevation of impact depending on DB privileges.\",\n      \"remediation\": \"Use parameterized queries/prepared statements and ORM parameter binding. Validate and sanitize input server-side, enforce least privilege for DB accounts, and implement query escaping where necessary. Add WAF rules to detect exploitation attempts.\",\n      \"references\": [\n        \"https://owasp.org/www-community/attacks/SQL_Injection\"\n      ]\n    },\n    {\n      \"id\": \"VULN-002\",\n      \"title\": \"Reflected Cross-Site Scripting (XSS) in search parameter\",\n      \"description\": \"The q parameter in GET /search is reflected into the HTML response without proper encoding. Injected script tags are returned verbatim and executed by the browser.\",\n      \"severity\": \"Medium\",\n      \"cwe_id\": \"CWE-79\",\n      \"owasp_category\": \"A03:2021 - Injection (Cross-Site Scripting)\",\n      \"affected_url\": \"https://app.acme.example/search?q=<payload>\",\n      \"affected_parameter\": \"q\",\n      \"http_method\": \"GET\",\n      \"evidence\": \"Response contains: <div>Results for <script>alert(1)</script></div>\",\n      \"payload\": \"<script>alert(1)</script>\",\n      \"impact\": \"An attacker can execute arbitrary JavaScript in victims' browsers, potentially stealing session tokens, performing actions on behalf of the user, or delivering malware.\",\n      \"remediation\": \"Apply proper output encoding based on HTML context (HTML encode data before insertion). Use a secure templating/escaping framework, validate input, implement Content Security Policy (CSP) to mitigate impact, and sanitize user-supplied HTML.\",\n      \"references\": [\n        \"https://owasp.org/www-community/attacks/xss/\"\n      ]\n    },\n    {\n      \"id\": \"VULN-003\",\n      \"title\": \"Insecure Direct Object Reference (IDOR) in order access\",\n      \"description\": \"Authenticated user can access other users' orders by modifying the orderId path parameter (GET /orders/{orderId}). The application returns order details without verifying ownership/authorization of the authenticated user.\",\n      \"severity\": \"High\",\n      \"cwe_id\": \"CWE-639\",\n      \"owasp_category\": \"A01:2021 - Broken Access Control\",\n      \"affected_url\": \"https://app.acme.example/orders/1024\",\n      \"affected_parameter\": \"orderId (path)\",\n      \"http_method\": \"GET\",\n      \"evidence\": \"Request: GET /orders/1024 with session cookie for tester@example.com returned 200 OK with order details for user id 204 (not the authenticated user).\",\n      \"payload\": \"GET /orders/1024\",\n      \"impact\": \"Unauthorized disclosure of other users' order details and potentially PII, leading to privacy violations, information leakage and potential fraud.\",\n      \"remediation\": \"Enforce server-side authorization checks on every resource access to ensure the requesting user owns or is permitted to access the resource. Use indirect references (mapping from public token to internal ID) or check resource ownership in business logic. Implement automated authorization tests.\",\n      \"references\": [\n        \"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\n      ]\n    },\n    {\n      \"id\": \"VULN-004\",\n      \"title\": \"Session cookie missing Secure flag\",\n      \"description\": \"The session cookie (Set-Cookie: session=abc123; HttpOnly; Path=/) is missing the Secure attribute, allowing the cookie to be transmitted over unencrypted HTTP connections if encountered.\",\n      \"severity\": \"Low\",\n      \"cwe_id\": \"CWE-614\",\n      \"owasp_category\": \"A05:2021 - Security Misconfiguration\",\n      \"affected_url\": \"https://app.acme.example (Set-Cookie header)\",\n      \"affected_parameter\": \"session cookie (Set-Cookie)\",\n      \"http_method\": \"N/A (response header)\",\n      \"evidence\": \"Response header: Set-Cookie: session=abc123; HttpOnly; Path=/\",\n      \"payload\": \"N/A\",\n      \"impact\": \"Session cookies could be exposed over non-HTTPS channels in mixed-content environments, increasing risk of session hijacking; reduces effectiveness of transport security.\",\n      \"remediation\": \"Set Secure and HttpOnly attributes on session cookies. Consider SameSite=strict or lax as appropriate. Ensure all traffic is served over HTTPS and redirect HTTP to HTTPS. Review cookie scope and lifetime.\",\n      \"references\": [\n        \"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\n      ]\n    },\n    {\n      \"id\": \"VULN-005\",\n      \"title\": \"Outdated jQuery library (1.9.1)\",\n      \"description\": \"The application includes an outdated jQuery library (version 1.9.1) at /static/js/jquery.min.js. This version contains known vulnerabilities that could be leveraged in client-side attacks.\",\n      \"severity\": \"Info\",\n      \"cwe_id\": \"CWE-1104\",\n      \"owasp_category\": \"A06:2021 - Vulnerable and Outdated Components\",\n      \"affected_url\": \"https://app.acme.example/static/js/jquery.min.js\",\n      \"affected_parameter\": \"static JS component\",\n      \"http_method\": \"GET\",\n      \"evidence\": \"Script src: /static/js/jquery.min.js (1.9.1) observed in page source\",\n      \"payload\": \"N/A\",\n      \"impact\": \"Using outdated components can expose the application to known client-side vulnerabilities and exploitation vectors; may enable XSS or other client-side attacks depending on the vulnerability.\",\n      \"remediation\": \"Upgrade jQuery to the latest secure stable version after testing for compatibility. Use Subresource Integrity (SRI) and serve libraries from trusted sources. Maintain a software bill of materials and monitor component vulnerabilities.\",\n      \"references\": [\n        \"https://snyk.io/vuln/npm:jquery\"\n      ]\n    }\n  ]\n}",
  "dynamic_analysis_results": "{\n  \"analysis_metadata\": {\n    \"analysis_date\": \"2025-08-09\",\n    \"target_url\": \"http://localhost:8080\",\n    \"total_vulnerabilities_tested\": 5,\n    \"nuclei_version\": \"2.9.13\",\n    \"templates_used\": [\n      \"acme-sqli-products\",\n      \"acme-xss-search\",\n      \"acme-idor-orders\",\n      \"acme-cookie-secure-missing\",\n      \"acme-outdated-jquery\"\n    ],\n    \"custom_templates_created\": 5\n  },\n  \"exploitation_results\": [\n    {\n      \"vulnerability_id\": \"VULN-001\",\n      \"vulnerability_title\": \"SQL Injection in product search\",\n      \"exploitation_status\": \"EXPLOTABLE\",\n      \"confidence_level\": \"High\",\n      \"nuclei_findings\": [\n        {\n          \"template_id\": \"acme-sqli-products\",\n          \"matched_url\": \"http://localhost:8080/products\",\n          \"severity\": \"high\",\n          \"description\": \"POST to /products with crafted category_id returned 500 and SQL error text\",\n          \"extracted_data\": [\n            \"You have an error in your SQL syntax near \\\"' OR '1'='1\\\" at line 1\"\n          ],\n          \"response_time\": \"150ms\",\n          \"status_code\": 500\n        }\n      ],\n      \"exploitation_details\": {\n        \"payload_used\": \"category_id=1' OR '1'='1\",\n        \"request_method\": \"POST\",\n        \"vulnerable_parameter\": \"category_id\",\n        \"response_indicators\": [\n          \"500 Internal Server Error\",\n          \"You have an error in your SQL syntax\"\n        ],\n        \"custom_template_used\": true\n      },\n      \"evidence\": {\n        \"request\": \"POST /products HTTP/1.1\\\\nContent-Type: application/x-www-form-urlencoded\\\\n\\\\ncategory_id=1' OR '1'='1\",\n        \"response\": \"HTTP/1.1 500 Internal Server Error\\\\n...You have an error in your SQL syntax near \\\"' OR '1'='1\\\" at line 1...\",\n        \"proof_of_concept\": \"Submitting category_id=1' OR '1'='1 triggers SQL error (500) confirming injection point and ability to manipulate query. Further exploitation can enumerate columns via time-based or error-based techniques.\"\n      },\n      \"impact_assessment\": {\n        \"exploitability\": \"High\",\n        \"data_exposure\": \"Potential exposure of database contents, sensitive customer and order information\",\n        \"system_impact\": \"Data disclosure, data modification, potential privilege escalation depending on DB account permissions\"\n      },\n      \"recommendations\": \"Use parameterized queries/prepared statements or ORM binding; validate and sanitize input server-side; enforce least privilege for DB accounts; add WAF rules to detect SQLi payloads; add input length and type checks.\"\n    },\n    {\n      \"vulnerability_id\": \"VULN-002\",\n      \"vulnerability_title\": \"Reflected Cross-Site Scripting (XSS) in search parameter\",\n      \"exploitation_status\": \"EXPLOTABLE\",\n      \"confidence_level\": \"High\",\n      \"nuclei_findings\": [\n        {\n          \"template_id\": \"acme-xss-search\",\n          \"matched_url\": \"http://localhost:8080/search?q=<script>alert(1)</script>\",\n          \"severity\": \"medium\",\n          \"description\": \"Reflected script payload present in HTML response\",\n          \"extracted_data\": [\n            \"<div>Results for <script>alert(1)</script></div>\"\n          ],\n          \"response_time\": \"85ms\",\n          \"status_code\": 200\n        }\n      ],\n      \"exploitation_details\": {\n        \"payload_used\": \"<script>alert(1)</script>\",\n        \"request_method\": \"GET\",\n        \"vulnerable_parameter\": \"q\",\n        \"response_indicators\": [\n          \"Reflected script tag in HTML body\",\n          \"alert(1) payload present verbatim\"\n        ],\n        \"custom_template_used\": true\n      },\n      \"evidence\": {\n        \"request\": \"GET /search?q=<script>alert(1)</script> HTTP/1.1\",\n        \"response\": \"HTTP/1.1 200 OK\\\\nContent-Type: text/html\\\\n\\\\n<div>Results for <script>alert(1)</script></div>\",\n        \"proof_of_concept\": \"Reflected script appears unencoded in the response; an attacker can craft a link to execute JS in victims' browsers leading to session theft or CSRF actions.\"\n      },\n      \"impact_assessment\": {\n        \"exploitability\": \"High\",\n        \"data_exposure\": \"Potential theft of session cookies, DOM data, or execution of actions as user\",\n        \"system_impact\": \"Account takeover on victim browsers, credential theft, or delivery of further payloads\"\n      },\n      \"recommendations\": \"Apply context-aware output encoding (HTML-encode) user-supplied input, use secure templating/escaping libraries, implement Content Security Policy (CSP), and validate/sanitize inputs.\"\n    },\n    {\n      \"vulnerability_id\": \"VULN-003\",\n      \"vulnerability_title\": \"Insecure Direct Object Reference (IDOR) in order access\",\n      \"exploitation_status\": \"EXPLOTABLE\",\n      \"confidence_level\": \"High\",\n      \"nuclei_findings\": [\n        {\n          \"template_id\": \"acme-idor-orders\",\n          \"matched_url\": \"http://localhost:8080/orders/1024\",\n          \"severity\": \"high\",\n          \"description\": \"GET /orders/1024 returned order details for a different user (ownership mismatch)\",\n          \"extracted_data\": [\n            \"\\\"orderId\\\":1024\",\n            \"\\\"userId\\\":204\",\n            \"Order total: $123.45\"\n          ],\n          \"response_time\": \"110ms\",\n          \"status_code\": 200\n        }\n      ],\n      \"exploitation_details\": {\n        \"payload_used\": \"GET /orders/1024\",\n        \"request_method\": \"GET\",\n        \"vulnerable_parameter\": \"orderId (path)\",\n        \"response_indicators\": [\n          \"200 OK with JSON containing \\\"userId\\\":204 (different from authenticated user)\",\n          \"\\\"orderId\\\":1024 present\"\n        ],\n        \"custom_template_used\": true\n      },\n      \"evidence\": {\n        \"request\": \"GET /orders/1024 HTTP/1.1\\\\nCookie: session=abc123\",\n        \"response\": \"HTTP/1.1 200 OK\\\\nContent-Type: application/json\\\\n\\\\n{\\\"orderId\\\":1024,\\\"userId\\\":204,\\\"items\\\":...,\\\"total\\\":\\\"123.45\\\"}\",\n        \"proof_of_concept\": \"Authenticated user can enumerate order IDs and retrieve other users' orders. Access control check missing on resource fetch.\"\n      },\n      \"impact_assessment\": {\n        \"exploitability\": \"High\",\n        \"data_exposure\": \"Exposure of PII, order details, shipping addresses, payment metadata\",\n        \"system_impact\": \"Privacy violations, potential fraud or targeted attacks using harvested PII\"\n      },\n      \"recommendations\": \"Enforce server-side authorization checks for resource ownership on every access; implement indirect references; add automated authorization tests and audit logs.\"\n    },\n    {\n      \"vulnerability_id\": \"VULN-004\",\n      \"vulnerability_title\": \"Session cookie missing Secure flag\",\n      \"exploitation_status\": \"EXPLOTABLE\",\n      \"confidence_level\": \"Medium\",\n      \"nuclei_findings\": [\n        {\n          \"template_id\": \"acme-cookie-secure-missing\",\n          \"matched_url\": \"http://localhost:8080/\",\n          \"severity\": \"low\",\n          \"description\": \"Set-Cookie header for session cookie observed without Secure attribute\",\n          \"extracted_data\": [\n            \"Set-Cookie: session=abc123; HttpOnly; Path=/\"\n          ],\n          \"response_time\": \"45ms\",\n          \"status_code\": 200\n        }\n      ],\n      \"exploitation_details\": {\n        \"payload_used\": \"GET / (observe Set-Cookie header)\",\n        \"request_method\": \"GET\",\n        \"vulnerable_parameter\": \"session cookie (Set-Cookie header)\",\n        \"response_indicators\": [\n          \"Set-Cookie header present without Secure attribute\",\n          \"HttpOnly present but Secure missing\"\n        ],\n        \"custom_template_used\": true\n      },\n      \"evidence\": {\n        \"request\": \"GET / HTTP/1.1\",\n        \"response\": \"HTTP/1.1 200 OK\\\\nSet-Cookie: session=abc123; HttpOnly; Path=/\\\\n...\",\n        \"proof_of_concept\": \"Cookie lacks Secure flag; if the application or environment ever serves content over HTTP or is subject to mixed-content, the cookie could be transmitted unencrypted.\"\n      },\n      \"impact_assessment\": {\n        \"exploitability\": \"Medium\",\n        \"data_exposure\": \"Session cookie could be exposed over non-HTTPS channels in mixed scenarios\",\n        \"system_impact\": \"Increased risk of session hijacking; reduces transport-layer cookie protections\"\n      },\n      \"recommendations\": \"Set Secure attribute on session cookies, maintain HttpOnly, and consider SameSite=lax/strict. Ensure all traffic is HTTPS and redirect HTTP to HTTPS.\"\n    },\n    {\n      \"vulnerability_id\": \"VULN-005\",\n      \"vulnerability_title\": \"Outdated jQuery library (1.9.1)\",\n      \"exploitation_status\": \"PARCIAL\",\n      \"confidence_level\": \"Medium\",\n      \"nuclei_findings\": [\n        {\n          \"template_id\": \"acme-outdated-jquery\",\n          \"matched_url\": \"http://localhost:8080/static/js/jquery.min.js\",\n          \"severity\": \"info\",\n          \"description\": \"jQuery 1.9.1 string found in served JS file\",\n          \"extracted_data\": [\n            \"jQuery v1.9.1 - include found\"\n          ],\n          \"response_time\": \"30ms\",\n          \"status_code\": 200\n        }\n      ],\n      \"exploitation_details\": {\n        \"payload_used\": \"GET /static/js/jquery.min.js (identify version string)\",\n        \"request_method\": \"GET\",\n        \"vulnerable_parameter\": \"static JS component\",\n        \"response_indicators\": [\n          \"JS file includes 'jQuery v1.9.1' comment/header\"\n        ],\n        \"custom_template_used\": true\n      },\n      \"evidence\": {\n        \"request\": \"GET /static/js/jquery.min.js HTTP/1.1\",\n        \"response\": \"HTTP/1.1 200 OK\\\\nContent-Type: application/javascript\\\\n\\\\n/*! jQuery v1.9.1 | (c) 2005, 2012 jQuery Foundation... */\",\n        \"proof_of_concept\": \"The file served contains jQuery v1.9.1. Presence confirmed; exploitation requires a client-side attack chain (e.g., DOM XSS) using known jQuery issues, so direct server-side impact not demonstrated here.\"\n      },\n      \"impact_assessment\": {\n        \"exploitability\": \"Medium\",\n        \"data_exposure\": \"Indirect — may enable client-side attacks if combined with injectable vectors\",\n        \"system_impact\": \"Potential client-side compromise; increases attack surface\"\n      },\n      \"recommendations\": \"Upgrade jQuery to a secure supported version after compatibility testing; use Subresource Integrity (SRI); serve libraries from trusted/CDN sources and maintain a software bill of materials.\"\n    }\n  ],\n  \"custom_templates\": [\n    {\n      \"template_name\": \"acme-sqli-products\",\n      \"vulnerability_type\": \"SQL Injection\",\n      \"template_content\": \"id: acme-sqli-products\\ninfo:\\n  name: \\\"ACME SQLi - products category_id\\\"\\n  author: \\\"pentester\\\"\\n  severity: high\\n  description: \\\"Detect SQL Injection via category_id parameter on /products using a boolean payload that triggers SQL error\\\"\\nrequests:\\n  - method: POST\\n    path:\\n      - \\\"{{BaseURL}}/products\\\"\\n    body: \\\"category_id=1' OR '1'='1\\\"\\n    headers:\\n      Content-Type: \\\"application/x-www-form-urlencoded\\\"\\n    matchers:\\n      - type: status\\n        status:\\n          - 500\\n      - type: word\\n        part: body\\n        words:\\n          - \\\"You have an error in your SQL syntax\\\"\\n          - \\\"SQL syntax\\\"\\n\",\n      \"creation_reasoning\": \"The report shows an SQL error when category_id includes \\\"' OR '1'='1\\\". Created template to reproduce the exact payload, detect 500 responses and SQL error strings to confirm exploitable SQLi.\"\n    },\n    {\n      \"template_name\": \"acme-xss-search\",\n      \"vulnerability_type\": \"Reflected XSS\",\n      \"template_content\": \"id: acme-xss-search\\ninfo:\\n  name: \\\"ACME Reflected XSS - search q param\\\"\\n  author: \\\"pentester\\\"\\n  severity: medium\\n  description: \\\"Detect reflected XSS in q parameter of /search by submitting script payload and checking reflection in response\\\"\\nrequests:\\n  - method: GET\\n    path:\\n      - \\\"{{BaseURL}}/search?q=<script>alert(1)</script>\\\"\\n    matchers:\\n      - type: word\\n        part: body\\n        words:\\n          - \\\"<script>alert(1)</script>\\\"\\n\",\n      \"creation_reasoning\": \"Report evidence showed script was reflected verbatim. Template uses same script payload to confirm reflection and execution risk.\"\n    },\n    {\n      \"template_name\": \"acme-idor-orders\",\n      \"vulnerability_type\": \"IDOR / Broken Access Control\",\n      \"template_content\": \"id: acme-idor-orders\\ninfo:\\n  name: \\\"ACME IDOR - orders path\\\"\\n  author: \\\"pentester\\\"\\n  severity: high\\n  description: \\\"Detect IDOR on /orders/{orderId} by checking returned order owner differs from authenticated user (indicator strings from report)\\\"\\nrequests:\\n  - method: GET\\n    path:\\n      - \\\"{{BaseURL}}/orders/1024\\\"\\n    matchers:\\n      - type: status\\n        status:\\n          - 200\\n      - type: word\\n        part: body\\n        words:\\n          - \\\"user id 204\\\"\\n          - '\\\"userId\\\":204'\\n          - '\\\"orderId\\\":1024'\\n\",\n      \"creation_reasoning\": \"Report indicated GET /orders/1024 returned order details for user id 204. Template checks orderId and userId strings to confirm ownership mismatch and unauthorized access.\"\n    },\n    {\n      \"template_name\": \"acme-cookie-secure-missing\",\n      \"vulnerability_type\": \"Security Misconfiguration (Cookies)\",\n      \"template_content\": \"id: acme-cookie-secure-missing\\ninfo:\\n  name: \\\"ACME Cookie Secure Missing\\\"\\n  author: \\\"pentester\\\"\\n  severity: low\\n  description: \\\"Detect session cookie without Secure attribute in Set-Cookie header\\\"\\nrequests:\\n  - method: GET\\n    path:\\n      - \\\"{{BaseURL}}/\\\"\\n    matchers:\\n      - type: regex\\n        part: headers\\n        regex:\\n          - \\\"Set-Cookie:\\\\s*session=[^;]+;\\\\s*HttpOnly;\\\\s*Path=/\\\"\\n\",\n      \"creation_reasoning\": \"Report showed Set-Cookie header missing Secure. Template inspects response headers for the session cookie with HttpOnly but without Secure to confirm.\"\n    },\n    {\n      \"template_name\": \"acme-outdated-jquery\",\n      \"vulnerability_type\": \"Outdated Component\",\n      \"template_content\": \"id: acme-outdated-jquery\\ninfo:\\n  name: \\\"ACME Outdated jQuery 1.9.1\\\"\\n  author: \\\"pentester\\\"\\n  severity: info\\n  description: \\\"Detect inclusion of jQuery 1.9.1 in /static/js/jquery.min.js\\\"\\nrequests:\\n  - method: GET\\n    path:\\n      - \\\"{{BaseURL}}/static/js/jquery.min.js\\\"\\n    matchers:\\n      - type: word\\n        part: body\\n        words:\\n          - \\\"1.9.1\\\"\\n          - \\\"jQuery v1.9.1\\\"\\n\",\n      \"creation_reasoning\": \"Static analysis found jQuery 1.9.1 referenced. Template fetches the JS file and checks version strings to confirm presence of outdated library.\"\n    }\n  ],\n  \"summary\": {\n    \"exploitable_vulnerabilities\": 4,\n    \"non_exploitable_vulnerabilities\": 0,\n    \"partial_exploitations\": 1,\n    \"non_testeable\": 0,\n    \"overall_risk_level\": \"Critical\",\n    \"additional_findings\": \"Confirmed SQLi, reflected XSS, and IDOR on endpoints mapped to http://localhost:8080. Session cookie lacking Secure flag confirmed. Outdated jQuery 1.9.1 present (confirmed) — client-side exploitation requires a chain and was not demonstrated here. Recommend prioritized remediation: fix SQLi and broken access control immediately, patch XSS, enforce cookie Secure, and upgrade JS libraries. Ensure tests are re-run in production-equivalent environment and add monitoring/WAF rules to detect active exploitation attempts.\"\n  }\n}",
  "pdf_path": "report.pdf",
  "target_url": "http://localhost:8080",
  "output_directory": "./results"
}