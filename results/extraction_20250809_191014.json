{
  "document_metadata": {
    "title": "Security Assessment Report - Acme Web Application",
    "total_vulnerabilities": 5,
    "extraction_date": "2025-08-09",
    "source_file": "report.pdf"
  },
  "vulnerabilities": [
    {
      "id": "VULN-001",
      "title": "SQL Injection in product search",
      "description": "The category_id parameter in POST /products is concatenated directly into an SQL query. Submitting crafted input (e.g., a single quote and Boolean expression) triggers a database error and permits SQL manipulation and data extraction.",
      "severity": "High",
      "cwe_id": "CWE-89",
      "owasp_category": "A03:2021 - Injection",
      "affected_url": "https://app.acme.example/products",
      "affected_parameter": "category_id",
      "http_method": "POST",
      "evidence": "Response: 500 Internal Server Error; SQL Error: You have an error in your SQL syntax near \"' OR '1'='1\" at line 1",
      "payload": "category_id=1' OR '1'='1",
      "impact": "An attacker can bypass filters, extract sensitive data from the database, or modify database contents leading to data disclosure, corruption or elevation of impact depending on DB privileges.",
      "remediation": "Use parameterized queries/prepared statements and ORM parameter binding. Validate and sanitize input server-side, enforce least privilege for DB accounts, and implement query escaping where necessary. Add WAF rules to detect exploitation attempts.",
      "references": [
        "https://owasp.org/www-community/attacks/SQL_Injection"
      ]
    },
    {
      "id": "VULN-002",
      "title": "Reflected Cross-Site Scripting (XSS) in search parameter",
      "description": "The q parameter in GET /search is reflected into the HTML response without proper encoding. Injected script tags are returned verbatim and executed by the browser.",
      "severity": "Medium",
      "cwe_id": "CWE-79",
      "owasp_category": "A03:2021 - Injection (Cross-Site Scripting)",
      "affected_url": "https://app.acme.example/search?q=<payload>",
      "affected_parameter": "q",
      "http_method": "GET",
      "evidence": "Response contains: <div>Results for <script>alert(1)</script></div>",
      "payload": "<script>alert(1)</script>",
      "impact": "An attacker can execute arbitrary JavaScript in victims' browsers, potentially stealing session tokens, performing actions on behalf of the user, or delivering malware.",
      "remediation": "Apply proper output encoding based on HTML context (HTML encode data before insertion). Use a secure templating/escaping framework, validate input, implement Content Security Policy (CSP) to mitigate impact, and sanitize user-supplied HTML.",
      "references": [
        "https://owasp.org/www-community/attacks/xss/"
      ]
    },
    {
      "id": "VULN-003",
      "title": "Insecure Direct Object Reference (IDOR) in order access",
      "description": "Authenticated user can access other users' orders by modifying the orderId path parameter (GET /orders/{orderId}). The application returns order details without verifying ownership/authorization of the authenticated user.",
      "severity": "High",
      "cwe_id": "CWE-639",
      "owasp_category": "A01:2021 - Broken Access Control",
      "affected_url": "https://app.acme.example/orders/1024",
      "affected_parameter": "orderId (path)",
      "http_method": "GET",
      "evidence": "Request: GET /orders/1024 with session cookie for tester@example.com returned 200 OK with order details for user id 204 (not the authenticated user).",
      "payload": "GET /orders/1024",
      "impact": "Unauthorized disclosure of other users' order details and potentially PII, leading to privacy violations, information leakage and potential fraud.",
      "remediation": "Enforce server-side authorization checks on every resource access to ensure the requesting user owns or is permitted to access the resource. Use indirect references (mapping from public token to internal ID) or check resource ownership in business logic. Implement automated authorization tests.",
      "references": [
        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"
      ]
    },
    {
      "id": "VULN-004",
      "title": "Session cookie missing Secure flag",
      "description": "The session cookie (Set-Cookie: session=abc123; HttpOnly; Path=/) is missing the Secure attribute, allowing the cookie to be transmitted over unencrypted HTTP connections if encountered.",
      "severity": "Low",
      "cwe_id": "CWE-614",
      "owasp_category": "A05:2021 - Security Misconfiguration",
      "affected_url": "https://app.acme.example (Set-Cookie header)",
      "affected_parameter": "session cookie (Set-Cookie)",
      "http_method": "N/A (response header)",
      "evidence": "Response header: Set-Cookie: session=abc123; HttpOnly; Path=/",
      "payload": "N/A",
      "impact": "Session cookies could be exposed over non-HTTPS channels in mixed-content environments, increasing risk of session hijacking; reduces effectiveness of transport security.",
      "remediation": "Set Secure and HttpOnly attributes on session cookies. Consider SameSite=strict or lax as appropriate. Ensure all traffic is served over HTTPS and redirect HTTP to HTTPS. Review cookie scope and lifetime.",
      "references": [
        "https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"
      ]
    },
    {
      "id": "VULN-005",
      "title": "Outdated jQuery library (1.9.1)",
      "description": "The application includes an outdated jQuery library (version 1.9.1) at /static/js/jquery.min.js. This version contains known vulnerabilities that could be leveraged in client-side attacks.",
      "severity": "Info",
      "cwe_id": "CWE-1104",
      "owasp_category": "A06:2021 - Vulnerable and Outdated Components",
      "affected_url": "https://app.acme.example/static/js/jquery.min.js",
      "affected_parameter": "static JS component",
      "http_method": "GET",
      "evidence": "Script src: /static/js/jquery.min.js (1.9.1) observed in page source",
      "payload": "N/A",
      "impact": "Using outdated components can expose the application to known client-side vulnerabilities and exploitation vectors; may enable XSS or other client-side attacks depending on the vulnerability.",
      "remediation": "Upgrade jQuery to the latest secure stable version after testing for compatibility. Use Subresource Integrity (SRI) and serve libraries from trusted sources. Maintain a software bill of materials and monitor component vulnerabilities.",
      "references": [
        "https://snyk.io/vuln/npm:jquery"
      ]
    }
  ]
}